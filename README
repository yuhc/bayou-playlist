# Bayou

This is a Bayou implementation based on D. Terry's Managing Update Conflicts
in Bayou [1], and Session Guarantees for Weakly Consistent Replicated Data [2],
and K. Petersen's Flexible Update Propagation [3].

Now the README is copied directly from Paxos project. It will be updated later.


Project Information
==============================================================================
CS 380D Distributed Computing, Fall 2015

Project 3, Bayou
* Hangchen Yu, UT EID: HY4987, UTCS ID: ZHITINGZ
* Zhiting Zhu, UT EID: ZZ3883, UTCS ID: HYU


Testing the Project
==============================================================================
The source codes are put in `./src`. `COMMAND` file contains a single line
`./src/Master.py` which starts the master of Paxos system. Execute:
```
$ ./tester.py
```

It will test all the input files in `./tests`. The inputs must be named with
extension `.test`. It will compare the output of `Master.py` with the standard
outputs in `./solutions`.

`Python3` is required.

We supply **35** test cases including the original ones. They cover most special
cases including the basic operations and the session guarantees.

Some Assumptions
==============================================================================
* The tester should leave enough minutes for each test case. For the given test
cases, our program runs in less than 5 min (which is the time given by the
default tester). But it may run longer when given other tests (e.g. creating
20 servers and executing a `stabilize). We modified the timer to 50 min in order
to finish the test of 35 test cases.

* No crashes in the system.

* A client will only connect one server at a time.

* You should make sure that the indexes are not out of bound (otherwise that
command will be ignored).

* The channel is valid.

* `retirement` should be passed via Anti-Entropy.


Modification of Bayou
==============================================================================

Master
------------------------------------------------------------------------------
The master reads the input commands, and send messages to clients or servers
accordingly. Besides, the master needs to create the processes of servers and
clients. All the output that tester needs are written by master (to stdout).

As there are some commands requiring blocking, we use either asynchronous
blocking (conditional locks) or simple `time.sleep()` to wait for the completion
of these commands. At the end of the execution of master, it kills all the
processes in order to release the ports occupied by them.

Server
------------------------------------------------------------------------------
The code for server lives in server.py. Each server has the attributes of its
`node_id`, `unique_id`, `accept_time` (of writes), `version_vector` etc. Some
technical details are stated in the Technique Section.

The server creates a thread to handle the socket messages. It also creates a
separate thread to handle each anti-entropy process. We use conditional locks to
guarantee that the database is being edited only by one process.

The functions of server are mainly based on [1] and [3].

Client
------------------------------------------------------------------------------
The client sends message to server when master gives a GET/PUT/DELETE command.
It keeps a version vector to indicate the write it has seen. When a write or
read success, the message will carry the server's version vector and client
will update its version vector. During write (for both put and delete), client
will send its version vector to the server. If the client's version vector
is more recent than the server's version vector, then the server will not
perform the write which satisfies the write session guarantee. For read, the
client will get the server's version vector and the client will compare its
version vector with the server's version vector. If the server's version
vector does not dominant the client's version vector, the client will output
ERR_DEP for the song url and this helps to implement the read sessoin guarantee.


Some Techniques
==============================================================================

Message Formats
------------------------------------------------------------------------------
The messages are stored as objects. They are defined in `./src/message.py`.
There are three kinds of messages, normal `Message`, Anti-Entropy information
`AntiEntropy` and the writes `Write`. The network handler only sends and
receives `Message`. The `AntiEntropy` and `Write` are contained in the
`Message.content`. The messages and writes are specified with their unique ids.
Writes are also assigned with their states, write id, and accepted time. This
contents are used for reducing the unnecessary messages during Anti-Entropy [3].

Trigger Anti-Entropy
------------------------------------------------------------------------------
The Anti-Entropy process described in [3] is triggered periodically. The period
is randomly selected at the end of each Anti-Entropy. The server keeps four
lists: `server_list`, `block_list`, `sent_list` and `available_list`. Each time
the server will choose one destination from `available_list` to request the
Anti-Entropy.

The Anti-Entropy can either be accepted or be rejected by the destination. This
is to guarantee that the database will not be modified by several instances.
The destination will try the lock to determine whether it accepts the request.

Primary Election
------------------------------------------------------------------------------
When primary retires, it needs to do an antientropy with one other server to
write out its retirement. It will also notify that server be the new primary. 


When a primary is
